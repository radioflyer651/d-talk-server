import express from 'express';
import { ObjectId } from 'mongodb';
import { authDbService, ollamaModelConfigDbService } from '../app-globals';
import { OllamaModelConfiguration } from '../model/shared-models/chat-core/chat-model-params/ollama.model-params';
import { NewDbItem } from '../model/shared-models/db-operation-types.model';
import { getUserIdFromRequest } from '../utils/get-user-from-request.utils';

export const ollamaModelConfigServer = express.Router();

// Get all Ollama model configurations
ollamaModelConfigServer.get('/ollama-model-configs', async (req, res) => {
    try {
        const configs = await ollamaModelConfigDbService.getAllOllamaModelConfigurations();
        res.json(configs);
    } catch (error) {
        res.status(500).json({ error: 'Failed to fetch model configurations' });
    }
});

// Get a single configuration by ID
ollamaModelConfigServer.get('/ollama-model-config/:id', async (req, res) => {
    try {
        const configId = new ObjectId(req.params.id);
        const config = await ollamaModelConfigDbService.getOllamaModelConfigurationById(configId);
        if (!config) {
            res.status(404).json({ error: 'Model configuration not found' });
            return;
        }
        res.json(config);
    } catch (error) {
        res.status(500).json({ error: 'Failed to fetch model configuration' });
    }
});

// Create a new configuration
ollamaModelConfigServer.post('/ollama-model-config', async (req, res) => {
    try {
        const userId = getUserIdFromRequest(req);
        if (!userId) {
            res.sendStatus(403).send({ error: 'Unauthorized' });
            return;
        }

        const user = await authDbService.getUserById(userId);
        if (!user || !user.isAdmin) {
            res.sendStatus(403).send({ error: 'Unauthorized' });
            return;
        }

        const config = req.body as NewDbItem<OllamaModelConfiguration>;
        // _id will be generated by MongoDB if not provided
        const newConfig = await ollamaModelConfigDbService.upsertOllamaModelConfiguration(config);
        res.status(201).json(newConfig);
    } catch (error) {
        res.status(500).json({ error: 'Failed to create model configuration' });
    }
});

// Update a configuration by ID
ollamaModelConfigServer.put('/ollama-model-config', async (req, res) => {
    try {
        const userId = getUserIdFromRequest(req);
        if (!userId) {
            res.sendStatus(403).send({ error: 'Unauthorized' });
            return;
        }

        const user = await authDbService.getUserById(userId);
        if (!user || !user.isAdmin) {
            res.sendStatus(403).send({ error: 'Unauthorized' });
            return;
        }

        const update = req.body as Partial<OllamaModelConfiguration> & { _id?: string; };
        if (!update || !update._id) {
            res.status(400).json({ error: 'Missing required _id in body' });
            return;
        }
        const configId = new ObjectId(update._id);
        const result = await ollamaModelConfigDbService.updateOllamaModelConfiguration(configId, update);
        if (result > 0) {
            res.json({ success: true });
        } else {
            res.status(404).json({ error: 'Model configuration not found or not updated' });
        }
    } catch (error) {
        res.status(500).json({ error: 'Failed to update model configuration' });
    }
});

// Delete a configuration by ID
ollamaModelConfigServer.delete('/ollama-model-config/:id', async (req, res) => {
    try {
        const userId = getUserIdFromRequest(req);
        if (!userId) {
            res.sendStatus(403).send({ error: 'Unauthorized' });
            return;
        }

        const user = await authDbService.getUserById(userId);
        if (!user || !user.isAdmin) {
            res.sendStatus(403).send({ error: 'Unauthorized' });
            return;
        }

        const configId = new ObjectId(req.params.id);
        const result = await ollamaModelConfigDbService.deleteOllamaModelConfiguration(configId);
        if (result > 0) {
            res.json({ success: true });
        } else {
            res.status(404).json({ error: 'Model configuration not found or not deleted' });
        }
    } catch (error) {
        res.status(500).json({ error: 'Failed to delete model configuration' });
    }
});
